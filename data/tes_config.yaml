backend: classic
channels: [mt]
num_threads: 1
binning: data/binning.yaml
binning_key: gof
era: '2017'
tag: mtTES
output_file: ''  # shapes that enter datacards. If none context_analysis is used
skip_systematic_variations: True  # TEMP!
context_analysis: mtTES
variables_names: [
  m_vis,
  # leadingTauEnergyAssymetry,
  # m_1, m_2,
  # mt_1, mt_2,
  # # pt_1, pt_2,
  # # eta_1, eta_2,
  # # jpt_1, jpt_2,
  # # jeta_1, jeta_2,
  # # decayMode_1, decayMode_2,
  # # iso_1, iso_2,
  # # d0_1, d0_2,
  # # dZ_1, dZ_2
  # njets,
  # mt_tot,
  # # ptvis,
  # # npv,
  # njets,
  # nbtag,
  # # met,
  # # mjj,
  # # dijetpt,
  # # pZetaMissVis,
  # # rho,
]

# FF friends
et_friend_directory: []
mt_friend_directory: []
tt_friend_directory: []
fake_factor_friend_directory: [] #'/nfs/dust/cms/user/glusheno/FF/akhmet/SM_Htautau/ntuples/Artus17_2018-11-10/fake_factor_friends_njets_mvis'

# processed is the intersection with list from _known_estimation_methods
shifts: [
  nominal,
  # TES_shifts,
  # EMB,
  # FES_shifts,
  # Zpt,
]

# Typical processes affected by systematic variation
tes_sys_processes: ["ZTT", "TTT", "TTL", "VVT", "EWKT", "VVL", "EMB", "DYJetsToLL"]
fes_sys_processes: ['ZL', 'DYJetsToLL', 'EMB']
emb_sys_processes: ['EMB']
zpt_sys_processes: ['ZTT', 'ZL', 'ZJ']

# Needed for categorisation
decay_mode: [
  # 'alldm',  # inclusive
  # 'dm0',
  'dm1',
  # 'dm10',
]
jets_multiplicity: [
  'njetN',  # inclusive
  # 'njet0'
]

user_specific:
  directory:
    default: Null
    glusheno:
      naf: /nfs/dust/cms/user/glusheno/htautau/artus/TES/analysis/nominal/nominal_2019-02-14_01-30/merged

  datasets:
    default: Null
    glusheno:
      naf: /afs/desy.de/user/g/glusheno/RWTH/KIT/Artus/CMSSW_9_4_9/src/Kappa/Skimming/data/datasets.json

processes: []
module: Null
_known_estimation_methods:
  '2016': Null
  '2017':
      mtTES:
        tau_es_point : Null
        tau_es_charged : []
        tau_es_neutral : []
        module: shape_producer.estimation_methods_Fall17
        mt:
          renaming:      # user_ame : combine_name
            data_obs                : data
            jetFakes                : FAKES

          methods:
            # data_obs                : DataEstimation  # combine
            ZTT                     : ZTTEstimation
          # tests
          # Artur_DY: # Artur's example for testing ; missing for FES bg: 'TTT' 'VVT' 'TTJ' 'VVJ'
          methods2:
            data_obs                : DataEstimation  # combine
            ZTT                     : ZTTEstimation
            ZL                      : ZLEstimation
            ZJ                      : ZJEstimation
            TT                      : TTEstimation
            VV                      : VVEstimation
            WMC                     : WEstimation
            W                       : WEstimationWithQCD # bg: ["ZTT", "ZL", "ZJ", "TT", "VV"]], needs "WMC", qcd_ss_to_os_extrapolation_factor=1.09
            QCD                     : QCDEstimationWithW # bg: ["ZTT", "ZL", "ZJ", "TT", "VV"]], needs "WMC", qcd_ss_to_os_extrapolation_factor=1.09

          FES_FF_EMB:
          # methods:
            data_obs                : DataEstimation  # combine
            ZL                      : ZLEstimation  # combine; Signal ; class. QCD & W
            # Classical: to comb: "ZTT", "W", "QCD", "ZJ", "TTT", "TTJ","VVT","VVJ",
            ZTT                     : ZTTEstimation  # combine; class. QCD & W
            W                       : WEstimationWithQCD  # combine
            QCD                     : QCDEstimationWithW  # combine
            TTT                     : TTTEstimation  # combine
            VVT                     : VVTEstimation  # combine
            TTJ                     : TTJEstimation  # combine
            TTL                     : TTLEstimation  # new to combine
            VVL                     : VVLEstimation  # new to combine
            VVJ                     : VVJEstimation  # combine
            # for classical QCD & W :  ["DYJetsToLL", "TT", "VV", "EWKW"[?]  || previously needed bg: "ZTT", "ZL", "ZJ", "TT", "VV", "EWK" [?]
            # where "DYJetsToLL" = {"ZTT", "ZL", "ZJ", "EWKZ"}
            # DYJetsToLL              : DYJetsToLLEstimation
            ZJ                      : ZJEstimation  # combine ; class. QCD & W ; embedding
            TT                      : TTEstimation  # class. QCD & W ; sum(TTL, TTJ, TTT)
            VV                      : VVEstimation  # class. QCD & W ; sum(VVT, VVL, VVJ)
            WMC                     : WEstimation  # class. QCD & W ; now contains also EWKW
            jetFakes                : FakeEstimationLT
            # EMB                     : ZTTEmbeddedEstimation  # NEED A NEW ARTUS RUN

          Original_FES: # with classical bg estimations
          # methods:
            data_obs                : DataEstimation  # combine
            ZL                      : ZLEstimation  # combine; Signal ; class. QCD & W
            # Classical: to comb: "ZTT", "W", "QCD", "ZJ", "TTT", "TTJ","VVT","VVJ",
            ZTT                     : ZTTEstimation  # combine; class. QCD & W
            W                       : WEstimationWithQCD  # combine
            QCD                     : QCDEstimationWithW  # combine
            TTT                     : TTTEstimation  # combine
            VVT                     : VVTEstimation  # combine
            TTJ                     : TTJEstimation  # combine
            TTL                     : TTLEstimation  # new to combine
            VVL                     : VVLEstimation  # new to combine
            VVJ                     : VVJEstimation  # combine
            # for classical QCD & W :  ["DYJetsToLL", "TT", "VV", "EWKW"[?]  || previously needed bg: "ZTT", "ZL", "ZJ", "TT", "VV", "EWK" [?]
            # where "DYJetsToLL" = {"ZTT", "ZL", "ZJ", "EWKZ"}
            # DYJetsToLL              : DYJetsToLLEstimation
            ZJ                      : ZJEstimation  # combine ; class. QCD & W ; embedding
            TT                      : TTEstimation  # class. QCD & W ; sum(TTL, TTJ, TTT)
            VV                      : VVEstimation  # class. QCD & W ; sum(VVT, VVL, VVJ)
            WMC                     : WEstimation  # class. QCD & W ; now contains also EWKW
